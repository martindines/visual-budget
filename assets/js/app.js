// Generated by CoffeeScript 1.6.3
(function() {
  var Expense, ViewModel;

  Expense = function(title, value, vm) {
    if (isNaN(value)) {
      value = 0;
    }
    this.title = title;
    this.value = ko.observable(value);
    return this.total = this.value() + vm.budgetRemaining();
  };

  ViewModel = function() {
    var self;
    self = this;
    self.expenses = ko.observableArray([]);
    self.budget = ko.observable(100);
    self.budgetRemaining = ko.computed(function() {
      var i, total;
      total = self.budget();
      i = 0;
      while (i < self.expenses().length) {
        total -= self.expenses()[i].value();
        i++;
      }
      return total;
    }, self);
    self.expenses.push(new Expense("Insurance", 50, self));
    self.expenses.push(new Expense("Rent", 30, self));
    self.addExpense = function(form) {
      return self.expenses.push(new Expense(form.title.value));
    };
    return self.removeExpense = function(expense) {
      return self.expenses.remove(expense);
    };
  };

  ko.bindingHandlers.slider = {
    init: function(element, valueAccessor, allBindingsAccessor) {
      var options;
      console.log("hit");
      options = allBindingsAccessor().sliderOptions || {};
      $(element).slider(options);
      ko.utils.registerEventHandler(element, "slidechange", function(event, ui) {
        var observable;
        observable = valueAccessor();
        return observable(ui.value);
      });
      ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
        return $(element).slider("destroy");
      });
      return ko.utils.registerEventHandler(element, "slide", function(event, ui) {
        var observable;
        observable = valueAccessor();
        return observable(ui.value);
      });
    },
    update: function(element, valueAccessor) {
      var value;
      console.log("update");
      value = ko.utils.unwrapObservable(valueAccessor());
      if (isNaN(value)) {
        value = 0;
      }
      return $(element).slider("value", value);
    }
  };

  ko.applyBindings(new ViewModel());

}).call(this);
